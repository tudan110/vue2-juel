name: Vue2 CI

on:
  push:
    branches:
      - main
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DOCKER_REGISTRY: ${{ vars.DOCKER_REGISTRY }}
      IMAGE_NAME: tudan/vue2-juel
      TZ: Asia/Shanghai  # 统一设置时区
      TAG: ${{ github.run_number }}-${{ github.run_attempt }}

    steps:

      # 检出代码
      - name: Checkout code
        uses: actions/checkout@v4

      # 设置 Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      # 安装依赖
      - name: Install dependencies
        run: npm ci

      # 构建项目
      - name: Build project
        run: npm run build

      # 登录 Docker 仓库（使用 secrets 保护敏感信息）
      - name: Log in to private Docker Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # 新增时间戳生成步骤
      - name: Generate Timestamp
        id: timestamp
        run: echo "TIMESTAMP=$(TZ=Asia/Shanghai date +%Y%m%d%H%M)" >> $GITHUB_ENV

      # 构建并推送镜像（使用 BuildKit 和多平台支持）
      - name: Build and Push Docker Image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64 # 根据需求调整平台
          push: true
          tags: |
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TAG }}-${{ env.TIMESTAMP }}
            ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.TIMESTAMP }}
          cache-from: type=gha # 启用 GitHub Actions 缓存
          cache-to: type=gha,mode=max

      # 构建并推送镜像（强制使用上海时区生成时间戳）
#      - name: Build and Push Docker Image
#        run: |
#          # 显式指定时区（更可靠）%Y%m%d%H%M
#          export TAG=$(TZ=Asia/Shanghai date +%Y%m%d%H%M)
#
#          docker build -t ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG .
#          docker push ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG
